// Test generated by RoostGPT for test onlineBookStore using AI Type Open AI and AI Model gpt-4

package com.bittercode.service.impl;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.AfterEach;
import org.mockito.Mockito;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@SpringBootTest
public class BookServiceImpl_getBookById_9f03999294_Test {

    @Mock
    private Connection connection;

    @Mock
    private PreparedStatement preparedStatement;

    @Mock
    private ResultSet resultSet;

    @InjectMocks
    private BookServiceImpl bookService;

    @BeforeEach
    public void setUp() throws SQLException {
        when(connection.prepareStatement(any(String.class))).thenReturn(preparedStatement);
        when(preparedStatement.executeQuery()).thenReturn(resultSet);
    }

    @AfterEach
    public void tearDown() throws SQLException {
        verify(connection, times(1)).prepareStatement(any(String.class));
        verify(preparedStatement, times(1)).executeQuery();
    }

    @Test
    public void testGetBookById_Success() throws SQLException, StoreException {
        when(resultSet.next()).thenReturn(true).thenReturn(false);
        when(resultSet.getString(1)).thenReturn("123");
        when(resultSet.getString(2)).thenReturn("Test Book");
        when(resultSet.getString(3)).thenReturn("Test Author");
        when(resultSet.getInt(4)).thenReturn(100);
        when(resultSet.getInt(5)).thenReturn(10);

        Book result = bookService.getBookById("123");

        assertNotNull(result);
        assertEquals("123", result.getBookId());
        assertEquals("Test Book", result.getName());
        assertEquals("Test Author", result.getAuthor());
        assertEquals(100, result.getPrice());
        assertEquals(10, result.getQuantity());
    }

    @Test
    public void testGetBookById_NoResult() throws SQLException, StoreException {
        when(resultSet.next()).thenReturn(false);

        Book result = bookService.getBookById("123");

        assertNull(result);
    }

    @Test
    public void testGetBookById_SQLException() throws SQLException {
        when(preparedStatement.executeQuery()).thenThrow(SQLException.class);

        assertThrows(StoreException.class, () -> bookService.getBookById("123"));
    }
}
