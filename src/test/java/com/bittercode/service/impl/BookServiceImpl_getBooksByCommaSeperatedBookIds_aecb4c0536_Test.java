// Test generated by RoostGPT for test onlineBookStore using AI Type Open AI and AI Model gpt-4

package com.bittercode.service.impl;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

import com.bittercode.model.Book;
import com.bittercode.util.DBUtil;

public class BookServiceImpl_getBooksByCommaSeperatedBookIds_aecb4c0536_Test {

    @InjectMocks
    BookServiceImpl bookService;

    @Mock
    DBUtil dbUtil;
    
    @Mock
    Connection con;
    
    @Mock
    PreparedStatement ps;
    
    @Mock
    ResultSet rs;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetBooksByCommaSeperatedBookIds_success() throws SQLException, StoreException {
        when(dbUtil.getConnection()).thenReturn(con);
        when(con.prepareStatement(anyString())).thenReturn(ps);
        when(ps.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(true, true, false);
        
        when(rs.getString(1)).thenReturn("bCode1", "bCode2");
        when(rs.getString(2)).thenReturn("bName1", "bName2");
        when(rs.getString(3)).thenReturn("bAuthor1", "bAuthor2");
        when(rs.getInt(4)).thenReturn(100, 200);
        when(rs.getInt(5)).thenReturn(10, 20);
        
        List<Book> books = bookService.getBooksByCommaSeperatedBookIds("bCode1,bCode2");
        
        assertEquals(2, books.size());
        assertEquals("bCode1", books.get(0).getBCode());
        assertEquals("bCode2", books.get(1).getBCode());
    }

    @Test
    public void testGetBooksByCommaSeperatedBookIds_noBooks() throws SQLException, StoreException {
        when(dbUtil.getConnection()).thenReturn(con);
        when(con.prepareStatement(anyString())).thenReturn(ps);
        when(ps.executeQuery()).thenReturn(rs);
        when(rs.next()).thenReturn(false);
        
        List<Book> books = bookService.getBooksByCommaSeperatedBookIds("bCode1,bCode2");
        
        assertEquals(0, books.size());
    }

    @Test
    public void testGetBooksByCommaSeperatedBookIds_sqlException() throws SQLException {
        when(dbUtil.getConnection()).thenReturn(con);
        when(con.prepareStatement(anyString())).thenThrow(SQLException.class);
        
        assertThrows(StoreException.class, () -> {
            bookService.getBooksByCommaSeperatedBookIds("bCode1,bCode2");
        });
    }
}
