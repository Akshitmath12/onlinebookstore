// Test generated by RoostGPT for test onlineBookStore using AI Type Open AI and AI Model gpt-4

package servlets;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.bittercode.constant.ResponseCode;
import com.bittercode.model.UserRole;
import com.bittercode.service.BookService;
import com.bittercode.service.impl.BookServiceImpl;
import com.bittercode.util.StoreUtil;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.mockito.Mockito.*;

public class RemoveBookServlet_service_7ac35e6d18_Test {
    
    @Mock
    private HttpServletRequest request;

    @Mock
    private HttpServletResponse response;

    @Mock
    private PrintWriter writer;

    @Mock
    private RequestDispatcher dispatcher;

    @Mock
    private BookService bookService;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
        when(response.getWriter()).thenReturn(writer);
    }

    @Test
    public void testService_WhenNotLoggedIn() throws IOException, ServletException {
        when(request.getSession()).thenReturn(null);
        new RemoveBookServlet().service(request, response);
        verify(response.getWriter(), times(1)).println("<table class=\"tab\"><tr><td>Please Login First to Continue!!</td></tr></table>");
    }

    @Test
    public void testService_WhenBookIdIsBlank() throws IOException, ServletException {
        when(request.getSession()).thenReturn(mock(HttpSession.class));
        when(request.getParameter("bookId")).thenReturn("");
        new RemoveBookServlet().service(request, response);
        verify(response.getWriter(), times(1)).println("<div class='container'>");
    }

    @Test
    public void testService_WhenBookIsRemovedSuccessfully() throws IOException, ServletException {
        when(request.getSession()).thenReturn(mock(HttpSession.class));
        when(request.getParameter("bookId")).thenReturn("123");
        when(bookService.deleteBookById("123")).thenReturn(ResponseCode.SUCCESS.name());
        new RemoveBookServlet().service(request, response);
        verify(response.getWriter(), times(1)).println("<table class=\"tab my-5\"><tr><td>Book Removed Successfully</td></tr></table>");
    }

    @Test
    public void testService_WhenBookIsNotAvailable() throws IOException, ServletException {
        when(request.getSession()).thenReturn(mock(HttpSession.class));
        when(request.getParameter("bookId")).thenReturn("123");
        when(bookService.deleteBookById("123")).thenReturn(ResponseCode.FAILURE.name());
        new RemoveBookServlet().service(request, response);
        verify(response.getWriter(), times(1)).println("<table class=\"tab my-5\"><tr><td>Book Not Available In The Store</td></tr></table>");
    }
}
