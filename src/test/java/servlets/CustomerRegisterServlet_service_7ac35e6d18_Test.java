// Test generated by RoostGPT for test onlineBookStore using AI Type Open AI and AI Model gpt-4

package servlets;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;
import com.bittercode.constant.BookStoreConstants;
import com.bittercode.constant.ResponseCode;
import com.bittercode.constant.db.UsersDBConstants;
import com.bittercode.model.User;
import com.bittercode.model.UserRole;
import com.bittercode.service.UserService;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

@SpringBootTest
public class CustomerRegisterServlet_service_7ac35e6d18_Test {

    @Mock
    private HttpServletRequest req;
    @Mock
    private HttpServletResponse res;
    @Mock
    private UserService userService;
    @Mock
    private PrintWriter pw;
    @Mock
    private RequestDispatcher rd;

    @Before
    public void setUp() throws IOException {
        MockitoAnnotations.initMocks(this);
        when(res.getWriter()).thenReturn(pw);
    }

    @Test
    public void testService_successScenario() throws IOException, ServletException {
        when(req.getParameter(UsersDBConstants.COLUMN_PASSWORD)).thenReturn("password");
        when(req.getParameter(UsersDBConstants.COLUMN_FIRSTNAME)).thenReturn("John");
        when(req.getParameter(UsersDBConstants.COLUMN_LASTNAME)).thenReturn("Doe");
        when(req.getParameter(UsersDBConstants.COLUMN_ADDRESS)).thenReturn("123 Street");
        when(req.getParameter(UsersDBConstants.COLUMN_PHONE)).thenReturn("1234567890");
        when(req.getParameter(UsersDBConstants.COLUMN_MAILID)).thenReturn("john.doe@gmail.com");
        when(userService.register(UserRole.CUSTOMER, new User())).thenReturn(ResponseCode.SUCCESS.name());
        when(req.getRequestDispatcher("CustomerLogin.html")).thenReturn(rd);
        new CustomerRegisterServlet().service(req, res);
        assertEquals(BookStoreConstants.CONTENT_TYPE_TEXT_HTML, res.getContentType());
    }

    @Test
    public void testService_failureScenario() throws IOException, ServletException {
        when(req.getParameter(UsersDBConstants.COLUMN_PASSWORD)).thenReturn("password");
        when(req.getParameter(UsersDBConstants.COLUMN_FIRSTNAME)).thenReturn("John");
        when(req.getParameter(UsersDBConstants.COLUMN_LASTNAME)).thenReturn("Doe");
        when(req.getParameter(UsersDBConstants.COLUMN_ADDRESS)).thenReturn("123 Street");
        when(req.getParameter(UsersDBConstants.COLUMN_PHONE)).thenReturn("1234567890");
        when(req.getParameter(UsersDBConstants.COLUMN_MAILID)).thenReturn("john.doe@gmail.com");
        when(userService.register(UserRole.CUSTOMER, new User())).thenReturn(ResponseCode.FAILURE.name());
        when(req.getRequestDispatcher("CustomerRegister.html")).thenReturn(rd);
        new CustomerRegisterServlet().service(req, res);
        assertEquals(BookStoreConstants.CONTENT_TYPE_TEXT_HTML, res.getContentType());
    }
}
