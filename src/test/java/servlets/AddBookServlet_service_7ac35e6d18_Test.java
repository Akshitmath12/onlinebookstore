// Test generated by RoostGPT for test onlineBookStore using AI Type Open AI and AI Model gpt-4

package servlets;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.bittercode.constant.BookStoreConstants;
import com.bittercode.constant.db.BooksDBConstants;
import com.bittercode.model.Book;
import com.bittercode.service.BookService;
import com.bittercode.util.StoreUtil;

public class AddBookServlet_service_7ac35e6d18_Test {

    @Mock
    HttpServletRequest request;

    @Mock
    HttpServletResponse response;

    @Mock
    HttpSession session;

    @Mock
    RequestDispatcher rd;

    @Mock
    BookService bookService;

    @InjectMocks
    AddBookServlet addBookServlet;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testServiceSuccess() throws ServletException, IOException {
        when(request.getSession()).thenReturn(session);
        when(session.getAttribute(BookStoreConstants.KEY_USER_ROLE)).thenReturn("SELLER");
        when(request.getParameter(BooksDBConstants.COLUMN_NAME)).thenReturn("BookName");
        when(request.getParameter(BooksDBConstants.COLUMN_AUTHOR)).thenReturn("AuthorName");
        when(request.getParameter(BooksDBConstants.COLUMN_PRICE)).thenReturn("100");
        when(request.getParameter(BooksDBConstants.COLUMN_QUANTITY)).thenReturn("10");
        when(request.getRequestDispatcher(anyString())).thenReturn(rd);
        when(bookService.addBook(any(Book.class))).thenReturn("SUCCESS");

        StringWriter stringWriter = new StringWriter();
        PrintWriter writer = new PrintWriter(stringWriter);
        when(response.getWriter()).thenReturn(writer);

        addBookServlet.service(request, response);

        assertTrue(stringWriter.toString().contains("Book Detail Updated Successfully!"));
    }

    @Test
    public void testServiceFailure() throws ServletException, IOException {
        when(request.getSession()).thenReturn(session);
        when(session.getAttribute(BookStoreConstants.KEY_USER_ROLE)).thenReturn("SELLER");
        when(request.getParameter(BooksDBConstants.COLUMN_NAME)).thenReturn("BookName");
        when(request.getParameter(BooksDBConstants.COLUMN_AUTHOR)).thenReturn("AuthorName");
        when(request.getParameter(BooksDBConstants.COLUMN_PRICE)).thenReturn("100");
        when(request.getParameter(BooksDBConstants.COLUMN_QUANTITY)).thenReturn("10");
        when(request.getRequestDispatcher(anyString())).thenReturn(rd);
        when(bookService.addBook(any(Book.class))).thenReturn("FAILURE");

        StringWriter stringWriter = new StringWriter();
        PrintWriter writer = new PrintWriter(stringWriter);
        when(response.getWriter()).thenReturn(writer);

        addBookServlet.service(request, response);

        assertTrue(stringWriter.toString().contains("Failed to Add Books! Fill up CareFully"));
    }
}
