// Test generated by RoostGPT for test onlineBookStore using AI Type Open AI and AI Model gpt-4

package servlets;

import static org.mockito.Mockito.*;
import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import com.bittercode.constant.BookStoreConstants;
import com.bittercode.constant.db.UsersDBConstants;
import com.bittercode.model.User;
import com.bittercode.model.UserRole;
import com.bittercode.service.UserService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class CustomerLoginServlet_doPost_00789f8804_Test {
    
    @Mock
    HttpServletRequest request;

    @Mock
    HttpServletResponse response;

    @Mock
    RequestDispatcher rd;

    @Mock
    UserService authService;

    @Mock
    HttpSession session;

    @InjectMocks
    CustomerLoginServlet customerLoginServlet;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testDoPost_Success() throws IOException, ServletException {
        when(request.getParameter(UsersDBConstants.COLUMN_USERNAME)).thenReturn("testUser");
        when(request.getParameter(UsersDBConstants.COLUMN_PASSWORD)).thenReturn("testPassword");
        when(request.getSession()).thenReturn(session);
        when(request.getRequestDispatcher("CustomerHome.html")).thenReturn(rd);

        User user = new User();
        user.setFirstName("testUser");
        when(authService.login(UserRole.CUSTOMER, "testUser", "testPassword", session)).thenReturn(user);

        StringWriter stringWriter = new StringWriter();
        PrintWriter writer = new PrintWriter(stringWriter);
        when(response.getWriter()).thenReturn(writer);

        customerLoginServlet.doPost(request, response);

        verify(rd).include(request, response);
        String result = stringWriter.getBuffer().toString().trim();
        assert(result.contains("Welcome testUser, Happy Learning !!"));
    }

    @Test
    public void testDoPost_Failure() throws IOException, ServletException {
        when(request.getParameter(UsersDBConstants.COLUMN_USERNAME)).thenReturn("testUser");
        when(request.getParameter(UsersDBConstants.COLUMN_PASSWORD)).thenReturn("wrongPassword");
        when(request.getSession()).thenReturn(session);
        when(request.getRequestDispatcher("CustomerLogin.html")).thenReturn(rd);

        when(authService.login(UserRole.CUSTOMER, "testUser", "wrongPassword", session)).thenReturn(null);

        StringWriter stringWriter = new StringWriter();
        PrintWriter writer = new PrintWriter(stringWriter);
        when(response.getWriter()).thenReturn(writer);

        customerLoginServlet.doPost(request, response);

        verify(rd).include(request, response);
        String result = stringWriter.getBuffer().toString().trim();
        assert(result.contains("Incorrect UserName or PassWord"));
    }
}
