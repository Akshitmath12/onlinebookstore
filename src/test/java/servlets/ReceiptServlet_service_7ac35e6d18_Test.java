// Test generated by RoostGPT for test onlineBookStore using AI Type Open AI and AI Model gpt-4

package servlets;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import com.bittercode.constant.BookStoreConstants;
import com.bittercode.model.Book;
import com.bittercode.model.UserRole;
import com.bittercode.service.BookService;
import com.bittercode.service.impl.BookServiceImpl;
import com.bittercode.util.StoreUtil;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ReceiptServlet_service_7ac35e6d18_Test {

    @Mock
    HttpServletRequest request;
    @Mock
    HttpServletResponse response;
    @Mock
    PrintWriter writer;
    @Mock
    RequestDispatcher dispatcher;
    @Mock
    HttpSession session;
    @Mock
    BookService bookService;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testService_WhenUserNotLoggedIn() throws IOException, ServletException {
        when(request.getSession()).thenReturn(session);
        when(StoreUtil.isLoggedIn(UserRole.CUSTOMER, session)).thenReturn(false);
        when(response.getWriter()).thenReturn(writer);
        when(request.getRequestDispatcher("CustomerLogin.html")).thenReturn(dispatcher);

        new ReceiptServlet_service_7ac35e6d18_Test().service(request, response);

        verify(dispatcher, times(1)).include(request, response);
        verify(writer, times(1)).println("<table class=\"tab\"><tr><td>Please Login First to Continue!!</td></tr></table>");
    }

    @Test
    public void testService_WhenUserLoggedIn() throws IOException, ServletException {
        when(request.getSession()).thenReturn(session);
        when(StoreUtil.isLoggedIn(UserRole.CUSTOMER, session)).thenReturn(true);
        when(response.getWriter()).thenReturn(writer);
        when(request.getRequestDispatcher("CustomerHome.html")).thenReturn(dispatcher);

        Book book = new Book();
        book.setBarcode("123");
        book.setName("Java Programming");
        book.setAuthor("John Doe");
        book.setPrice(100.0);
        book.setQuantity(10);

        when(bookService.getAllBooks()).thenReturn(Arrays.asList(book));
        when(request.getParameter("qty1")).thenReturn("5");
        when(request.getParameter("checked1")).thenReturn("pay");

        new ReceiptServlet_service_7ac35e6d18_Test().service(request, response);

        verify(dispatcher, times(1)).include(request, response);
        verify(writer, times(1)).println("<tr><td>" + book.getBarcode() + "</td>");
        verify(writer, times(1)).println("<td>" + book.getName() + "</td>");
        verify(writer, times(1)).println("<td>" + book.getAuthor() + "</td>");
        verify(writer, times(1)).println("<td>" + book.getPrice() + "</td>");
        verify(writer, times(1)).println("<td>" + 5 + "</td>");
        verify(writer, times(1)).println("<td>" + book.getPrice() * 5 + "</td></tr>");
    }
}
